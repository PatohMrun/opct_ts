// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GovernmentRecord {
  nationalId     String    @id @db.VarChar(10)
  birthCertNo    String    @db.VarChar(15)
  dob            DateTime
  firstName      String    @db.VarChar(20)
  middleName     String?   @db.VarChar(20)
  lastName       String    @db.VarChar(20)
  gender         Gender
  districtOfBirth String   @db.VarChar(20)
  district       String    @db.VarChar(20)
  division       String    @db.VarChar(20)
  location       String    @db.VarChar(20)
  sublocation    String    @db.VarChar(20)
  kraPin         String?   @db.VarChar(20)
  deathCertNo    String?   @db.VarChar(20)
  user           User?
}

model User {
  id             Int       @id @default(autoincrement())
  nationalId     String    @unique
  password       String
  email          String?   @unique
  phone          String?
  maritalStatus  MaritalStatus
  employmentStatus EmploymentStatus
  chronicIllness Boolean
  disabled       Boolean
  sourceOfIncome String?
  otherAssistance String?
  address        String?
  county         String
  subCounty      String
  constituency   String
  ward           String
  village        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  governmentRecord GovernmentRecord @relation(fields: [nationalId], references: [nationalId])
  application    Application?
  nextOfKin      NextOfKin?
  bankDetails    BankDetails?
  alternatePayee AlternatePayee?
  dependents     Dependent[]
  messages       Message[]
  token          String?
}

model Application {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  status         ApplicationStatus
  submittedAt    DateTime  @default(now())
  verifiedAt     DateTime?
  approvedAt     DateTime?
  user           User      @relation(fields: [userId], references: [id])
}

model NextOfKin {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  firstName      String
  middleName     String?
  lastName       String
  relationship   String
  email          String?
  phone          String
  user           User      @relation(fields: [userId], references: [id])
}

model BankDetails {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  bankName       String
  accountNumber  String
  user           User      @relation(fields: [userId], references: [id])
}

model AlternatePayee {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  firstName      String
  middleName     String?
  lastName       String
  bankName       String
  accountNumber  String
  user           User      @relation(fields: [userId], references: [id])
}

model Dependent {
  id             Int       @id @default(autoincrement())
  userId         Int
  firstName      String
  middleName     String?
  lastName       String
  gender         Gender
  dob            DateTime
  relationship   String
  user           User      @relation(fields: [userId], references: [id])
}

model Message {
  id             Int       @id @default(autoincrement())
  userId         Int
  adminId        Int?
  content        String
  createdAt      DateTime  @default(now())
  isAdminReply   Boolean   @default(false)
  user           User      @relation(fields: [userId], references: [id])
  admin          Admin?    @relation(fields: [adminId], references: [id])
}

model Admin {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  password       String
  email          String    @unique
  messages       Message[]
}

model Carousel {
  id             Int       @id @default(autoincrement())
  title          String
  content        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum Gender {
  Male
  Female
}

enum MaritalStatus {
  Single
  Married
  Widowed
}

enum EmploymentStatus {
  Employed
  Unemployed
}

enum ApplicationStatus {
  Submitted
  Pending
  Approved
  Rejected
}