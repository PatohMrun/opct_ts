// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GovernmentRecord {
  nationalId      String    @id @db.VarChar(10)
  birthCertNo     String    @db.VarChar(15)
  dob             DateTime
  firstName       String    @db.VarChar(20)
  middleName      String?   @db.VarChar(20)
  lastName        String    @db.VarChar(20)
  gender          Gender
  districtOfBirth String    @db.VarChar(20)
  district        String    @db.VarChar(20)
  division        String    @db.VarChar(20)
  location        String    @db.VarChar(20)
  sublocation     String    @db.VarChar(20)
  kraPin          String?   @db.VarChar(20)
  deathCertNo     String?   @db.VarChar(20)
  deathDate       DateTime? // New field
  user            User?
}

model User {
  id               Int              @id @default(autoincrement())
  nationalId       String           @unique
  password         String
  email            String?          @unique
  phone            String?
  role             Role             @default(USER)
  maritalStatus    MaritalStatus
  employmentStatus EmploymentStatus
  chronicIllness   Boolean
  disabled         Boolean
  sourceOfIncome   String?
  otherAssistance  String?
  address          String?
  county           String
  subCounty        String
  constituency     String
  ward             String
  village          String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  governmentRecord GovernmentRecord @relation(fields: [nationalId], references: [nationalId])
  application      Application?
  nextOfKin        NextOfKin?
  bankDetails      BankDetails?
  alternatePayee   AlternatePayee?
  dependents       Dependent[]
  token            String?
  receivedMessages Message[]        @relation(name: "ReceivedMessages")
  sentMessages     Message[]        @relation(name: "SentMessages")

  Message Message[]

  notifications Notification[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Application {
  id          Int               @id @default(autoincrement())
  userId      Int               @unique
  status      ApplicationStatus
  submittedAt DateTime          @default(now())
  verifiedAt  DateTime?
  approvedAt  DateTime?
  rejectedAt  DateTime? // New field
  isRemoved   Boolean           @default(false) // New field
  user        User              @relation(fields: [userId], references: [id])
}

model NextOfKin {
  id           Int     @id @default(autoincrement())
  userId       Int     @unique
  firstName    String
  middleName   String?
  lastName     String
  relationship String
  email        String?
  phone        String
  user         User    @relation(fields: [userId], references: [id])
}

model BankDetails {
  id            Int    @id @default(autoincrement())
  userId        Int    @unique
  bankName      String
  accountNumber String
  user          User   @relation(fields: [userId], references: [id])
}

model AlternatePayee {
  id            Int     @id @default(autoincrement())
  userId        Int     @unique
  firstName     String
  middleName    String?
  lastName      String
  bankName      String
  accountNumber String
  user          User    @relation(fields: [userId], references: [id])
}

model Dependent {
  id           Int      @id @default(autoincrement())
  userId       Int
  firstName    String
  middleName   String?
  lastName     String
  gender       Gender
  dob          DateTime
  relationship String
  user         User     @relation(fields: [userId], references: [id])
}

model Message {
  id           Int      @id @default(autoincrement())
  content      String
  createdAt    DateTime @default(now())
  isAdminReply Boolean  @default(false)
  sender       User     @relation(name: "SentMessages", fields: [senderId], references: [id])
  senderId     Int
  receiver     User     @relation(name: "ReceivedMessages", fields: [receiverId], references: [id])
  receiverId   Int
  User         User?    @relation(fields: [userId], references: [id])
  userId       Int?
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  Male
  Female
}

enum MaritalStatus {
  Single
  Married
  Widowed
}

enum EmploymentStatus {
  Employed
  Unemployed
}

enum ApplicationStatus {
  Unsubmitted
  Pending
  Approved
  Rejected
}

enum Role {
  USER
  ADMIN
}
